// <auto-generated />
using System;
using EFCoreBooks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreBooks.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230416015229_DataSeedingGeneral")]
    partial class DataSeedingGeneral
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookKind", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("KindsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "KindsId");

                    b.HasIndex("KindsId");

                    b.ToTable("BookKind");

                    b.HasData(
                        new
                        {
                            BooksId = 5,
                            KindsId = 2
                        });
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Fortune")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Autors");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1967, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fortune = 123m,
                            Name = "Another author"
                        });
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("OnSale")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PremiereDate")
                        .HasColumnType("date");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            OnSale = true,
                            PremiereDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 123.45,
                            Title = "Book five"
                        });
                });

            modelBuilder.Entity("EFCoreBooks.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BooksAuthors");

                    b.HasData(
                        new
                        {
                            BookId = 5,
                            AuthorId = 2,
                            Character = "Character one",
                            Order = 1
                        });
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("ThumbUp")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            BookId = 5,
                            Content = "Comment three",
                            ThumbUp = true
                        });
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Kinds");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fantastic"
                        });
                });

            modelBuilder.Entity("BookKind", b =>
                {
                    b.HasOne("EFCoreBooks.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreBooks.Entities.Kind", null)
                        .WithMany()
                        .HasForeignKey("KindsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreBooks.Entities.BookAuthor", b =>
                {
                    b.HasOne("EFCoreBooks.Entities.Author", "Author")
                        .WithMany("BooksAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreBooks.Entities.Book", "Book")
                        .WithMany("BooksAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Comment", b =>
                {
                    b.HasOne("EFCoreBooks.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Author", b =>
                {
                    b.Navigation("BooksAuthors");
                });

            modelBuilder.Entity("EFCoreBooks.Entities.Book", b =>
                {
                    b.Navigation("BooksAuthors");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
